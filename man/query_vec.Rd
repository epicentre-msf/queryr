% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/query_vec.R
\name{query_vec}
\alias{query_vec}
\title{Data validation queries vectorized over multiple query expressions}
\usage{
query_vec(
  data,
  cond,
  name,
  cols_base,
  name_col = "query_id",
  pivot_var = "variable",
  pivot_val = "value",
  as_chr = TRUE
)
}
\arguments{
\item{data}{Data frame to query}

\item{cond}{Character vector of expressions to evaluate with respect to
variables within \code{data}.}

\item{name}{(Optional) Character vector giving query names/IDs for each of
the expressions within \code{cond}. If missing the expressions themselves (in
string format) are used as names.}

\item{cols_base}{(Optional) Tidy-selection of other columns within \code{data} to
retain in the final output. Can be set for an entire session using option
"queryr_cols_base", e.g. \code{options(queryr_cols_base = quote(id:site))}.}

\item{name_col}{Column name for the query names/IDs. Defaults to "query_id".}

\item{pivot_var}{Prefix for pivoted variable column(s). Defaults to
"variable".}

\item{pivot_val}{Prefix for pivoted value column(s). Defaults to "value".}

\item{as_chr}{Logical indicating whether to coerce the columns referenced in
the query expression(s) to character prior to returning. This enables
row-binding multiple queries with variables of different classes. Defaults
to \code{TRUE}.}
}
\value{
A data frame reflecting the rows of \code{data} that match the given queries.
Returned columns include:
\itemize{
\item query name/ID column (name taken from argument \code{name_col})
\item (optional) columns matched by argument \code{cols_base}
\item columns referenced within the query expressions, pivoted to long form
}
}
\description{
Data validation queries as in \code{\link{query}}, but vectorized over a set of query
expressions in string format (and optionally a corresponding vector of query
names/IDs). Results of the multiple queries are stacked and returned in a
single tidy data frame, with columns referenced in the query expressions
pivoted to long-form (e.g. "variable1", "value1", "variable2", "value2",
...).
}
\examples{
data(ll)          # example dataset, an epidemiological linelist
data(ll_queries)  # example data frame defining queries to run on ll

# run all queries defined in ll_queries
query_vec(
  ll,
  cond = ll_queries$query,
  name = ll_queries$query_id,
  cols_base = c(id, site)
)

}
\seealso{
\code{\link{query}}
}
